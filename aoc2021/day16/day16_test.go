package main

import "testing"

func TestReadBits(t *testing.T) {
	reader := HexReader{
		data: "D2FE28",
	}

	str := ""
	for !reader.End() {
		str += reader.ReadBits(4)
	}
	expected := "110100101111111000101000"
	if str != expected {
		t.Errorf("Expected %s got %s\n", expected, str)
	}
}

func TestVersionIDs(t *testing.T) {
	tests := map[string]struct {
		data string
		want int
	}{
		"D2FE28": {
			data: "D2FE28",
			want: 6,
		},
		"8A004A801A8002F478": {
			data: "8A004A801A8002F478",
			want: 16,
		},
		"620080001611562C8802118E34": {
			data: "620080001611562C8802118E34",
			want: 12,
		},
		"C0015000016115A2E0802F182340": {
			data: "C0015000016115A2E0802F182340",
			want: 23,
		},
		"A0016C880162017C3686B18A3D4780": {
			data: "A0016C880162017C3686B18A3D4780",
			want: 31,
		},
		"part1-input": {
			data
			want: 963,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			reader := HexReader{
				data: test.data,
			}

			packets := readPackets(&reader, -1)

			sum := 0
			for _, packet := range packets {
				sum += calcVersionSum(packet)
			}
			if sum != test.want {
				t.Errorf("Expected %d got %d\n", test.want, sum)
			}

		})
	}
}

func TestExec(t *testing.T) {
	tests := map[string]struct {
		data string
		want int
	}{
		"C200B40A82": {
			data: "C200B40A82",
			want: 3,
		},
		"04005AC33890": {
			data: "04005AC33890",
			want: 54,
		},
		"880086C3E88112": {
			data: "880086C3E88112",
			want: 7,
		},
		"CE00C43D881120": {
			data: "CE00C43D881120",
			want: 9,
		},
		"D8005AC2A8F0": {
			data: "D8005AC2A8F0",
			want: 1,
		},
		"F600BC2D8F": {
			data: "F600BC2D8F",
			want: 0,
		},
		"9C005AC2F8F0": {
			data: "9C005AC2F8F0",
			want: 0,
		},
		"9C0141080250320F1802104A08": {
			data: "9C0141080250320F1802104A08",
			want: 1,
		},
		"part2-input": {
			data
			want: 1549026292886,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			reader := HexReader{
				data: test.data,
			}

			packets := readPackets(&reader, -1)

			val := traverse(packets[0])
			if val != test.want {
				t.Errorf("Expected %d got %d\n", test.want, val)
			}

		})
	}
}
